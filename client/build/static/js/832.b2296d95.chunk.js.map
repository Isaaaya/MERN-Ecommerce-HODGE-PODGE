{"version":3,"file":"static/js/832.b2296d95.chunk.js","mappings":"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","sources":["Pages/HandleBannerPage.jsx","hooks/collectionBanner/useCollectionBanner.js"],"sourcesContent":["import { useParams, Link } from \"react-router-dom\";\nimport { handleChange } from \"utils/functions/handleChange\";\nimport { useCollectionBanner } from \"hooks/collectionBanner/useCollectionBanner\";\n\nimport { ImageUpload } from \"Components/Image\";\nimport {\n  ColorPickers,\n  UpdateBannerButton,\n  DeleteBannerButton,\n  CreateBannerButton,\n} from \"Components/CollectionBanner\";\nimport { Container } from \"layout\";\nimport { XMarkIcon } from \"assets/icons\";\n\nconst HandleBannerPage = () => {\n  const { productCollectionId } = useParams();\n  const {\n    mode,\n    banner,\n    setBanner,\n    setBannerImage,\n    createBanner,\n    isCreateBannerPending,\n    deleteBanner,\n    isDeleteBannerPending,\n    updateBanner,\n    isUpdateBannerPending,\n  } = useCollectionBanner({ productCollectionId });\n\n  return (\n    <section>\n      <Container>\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n          <div className=\"relative flex flex-col gap-10 w-[100%] h-screen bg-white rounded-lg shadow-lg overflow-y-auto p-8\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-3xl font-semibold capitalize\">\n                {mode} Banner for Collection\n              </h3>\n              <Link to=\"/admin/productCollections\">\n                <XMarkIcon width=\"25\" height=\"25\" />\n              </Link>\n            </div>\n            <div className=\"flex flex-col gap-10\">\n              <div className=\"flex flex-col items-start gap-7 md:flex-row\">\n                <ImageUpload\n                  setValue={setBannerImage}\n                  imageUrl={banner?.imageUrl}\n                />\n                <div className=\"flex flex-col items-center justify-center gap-5 w-[100%]\">\n                  <input\n                    aria-label=\"Caption\"\n                    onChange={(e) => handleChange(e, setBanner)}\n                    value={banner?.caption}\n                    name=\"caption\"\n                    type=\"text\"\n                    placeholder=\"Caption\"\n                    className=\"w-[100%] p-2 rounded-md border-2 font-bold\"\n                    style={{ color: banner?.captionColor }}\n                  />\n                  <ColorPickers\n                    color={banner?.captionColor}\n                    setColor={(color) =>\n                      setBanner((prevState) => ({\n                        ...prevState,\n                        captionColor: color.hex,\n                      }))\n                    }\n                  />\n                </div>\n              </div>\n              <textarea\n                value={banner?.content}\n                onChange={(e) => handleChange(e, setBanner)}\n                type=\"text\"\n                name=\"content\"\n                placeholder=\"Content\"\n                className=\"border-2 rounded-md resize-none text-lg h-[170px] p-4 text-gray-600\"\n              />\n            </div>\n            <div className=\"space-x-5\">\n              {mode === \"update\" ? (\n                <div className=\"flex gap-3\">\n                  <UpdateBannerButton\n                    updateBanner={updateBanner}\n                    isUpdateBannerPending={isUpdateBannerPending}\n                  />\n                  <DeleteBannerButton\n                    deleteBanner={deleteBanner}\n                    isDeleteBannerPending={isDeleteBannerPending}\n                  />\n                </div>\n              ) : (\n                <CreateBannerButton\n                  isCreateBannerPending={isCreateBannerPending}\n                  createBanner={createBanner}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </Container>\n    </section>\n  );\n};\n\nexport default HandleBannerPage;\n","import { useState, useEffect } from \"react\";\nimport { useGetInstanceById } from \"hooks/instance/useGetInstanceById\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { createCollectionBannerAPI, updateCollectionBannerAPI, deleteCollectionBannerAPI } from \"api/productCollection\";\n\n\nexport const useCollectionBanner = ({ productCollectionId }) => {\n    const navigate = useNavigate();\n    const queryClient = useQueryClient();\n    const [banner, setBanner] = useState({\n        imageUrl: \"\",\n        caption: \"\",\n        captionColor: \"#aabbcc\",\n        content: \"\",\n    });\n    const [mode, setMode] = useState(\"add\");\n\n    const { groupTypeInstance: collection } = useGetInstanceById({\n        instanceType: \"productCollections\",\n        instanceId: productCollectionId,\n    })\n\n    useEffect(() => {\n        if (collection?.banner?.caption) {\n            setBanner(collection?.banner);\n            setMode(\"update\");\n        }\n    }, [collection]);\n\n    const setBannerImage = (value) => {\n        setBanner((prevState) => ({\n            ...prevState,\n            imageUrl: value,\n        }));\n    };\n\n    const { mutate: createBanner, isPending: isCreateBannerPending } = useMutation({\n        mutationFn: () => createCollectionBannerAPI({ productCollectionId, banner }),\n        onSuccess: () => navigate(\"/admin/productCollections\"),\n    });\n\n    const { mutate: updateBanner, isPending: isUpdateBannerPending } = useMutation({\n        mutationFn: () => updateCollectionBannerAPI({ productCollectionId, updatedBanner: banner }),\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: [\"productCollections\"] });\n            navigate(\"/admin/productCollections\");\n        },\n    });\n\n\n    const { mutate: deleteBanner, isPending: isDeleteBannerPending } = useMutation({\n        mutationFn: () => deleteCollectionBannerAPI({ productCollectionId }),\n        onSuccess: () => {\n            queryClient.invalidateQueries({ queryKey: [\"productCollections\"] });\n            navigate(\"/admin/productCollections\");\n        },\n    });\n\n\n    return { banner, setBanner, mode, setBannerImage, createBanner, isCreateBannerPending, deleteBanner, isDeleteBannerPending, updateBanner, isUpdateBannerPending };\n}"],"names":["_useCollectionBanner","_ref","productCollectionId","navigate","useNavigate","queryClient","useQueryClient","_useState","useState","imageUrl","caption","captionColor","content","_useState2","_slicedToArray","banner","setBanner","_useState3","_useState4","mode","setMode","collection","useGetInstanceById","instanceType","instanceId","groupTypeInstance","useEffect","_collection$banner","_useMutation","useMutation","mutationFn","createCollectionBannerAPI","onSuccess","createBanner","mutate","isCreateBannerPending","isPending","_useMutation2","updateCollectionBannerAPI","updatedBanner","invalidateQueries","queryKey","updateBanner","isUpdateBannerPending","_useMutation3","deleteCollectionBannerAPI","deleteBanner","isDeleteBannerPending","setBannerImage","value","prevState","_objectSpread","useCollectionBanner","useParams","_jsx","children","Container","className","_jsxs","Link","to","XMarkIcon","width","height","ImageUpload","setValue","onChange","e","handleChange","name","type","placeholder","style","color","ColorPickers","setColor","hex","UpdateBannerButton","DeleteBannerButton","CreateBannerButton"],"sourceRoot":""}